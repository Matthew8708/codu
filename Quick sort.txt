#include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

int partion(vector<int>& arr,int low,int high){
    int pivot=arr[high];
    int i=low-1;
    
    for(int j=low;j<high;++j){
        if(arr[j]<pivot){
            ++i;
            swap(arr[i],arr[j]);
        }
    }
    swap(arr[i+1],arr[high]);
    return i+1;
}
void quickSort(vector<int>&arr,int low,int high){
    if(low<high){
        int pi=partion(arr,low,high);
        #pragma omp parallel section
        {
            #pragma omp section
            {
                quickSort(arr,low,pi-1);
            }
            #pragma omp section
            {
                quickSort(arr,pi+1,high);
            }
        }
    }
}



int main() {
    vector<int> arr = {5, 2, 9, 1, 5, 6};

    cout << "Original Array:";
    for (int num : arr) {
        cout << " " << num;
    }
    cout << endl;

    quickSort(arr, 0, arr.size() - 1);

    cout << "Sorted Array:";
    for (int num : arr) {
        cout << " " << num;
    }
    cout << endl;

    return 0;
}
